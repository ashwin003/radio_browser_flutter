import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';

part 'station.g.dart';

@JsonSerializable()
class Station extends Equatable {
  /// A globally unique identifier for the change of the station information
  @JsonKey(name: "changeuuid")
  final String changeUUID;

  /// A globally unique identifier for the station
  @JsonKey(name: "stationuuid")
  final String stationUUID;

  @JsonKey(name: "serveruuid", defaultValue: "")
  final String serverUUID;

  /// The name of the station
  final String name;

  /// The stream URL provided by the user
  final Uri url;

  /// An automatically "resolved" stream URL.
  /// Things resolved are playlists (M3U/PLS/ASX...), HTTP redirects (Code 301/302).
  /// This link is especially usefull if you use this API from a platform that is not able to do a resolve on its own
  /// (e.g. JavaScript in browser) or you just don't want to invest the time in decoding playlists yourself.
  @JsonKey(name: "url_resolved")
  final Uri urlResolved;

  /// URL to the homepage of the stream, so you can direct the user to a page with more information about the stream.
  @JsonKey(name: "homepage")
  final Uri homePage;

  /// URL to an icon or picture that represents the stream. (PNG, JPG)
  final Uri favicon;

  /// Tags of the stream with more information about it
  @JsonKey(fromJson: _splitByComma)
  final List<String> tags;

  @Deprecated(
      "use [countryCode] instead, full name of the country. Currently it is autogenerated from the countrycode.")
  final String country;

  /// Official countrycodes as in ISO 3166-1 alpha-2
  @JsonKey(name: "countrycode")
  final String countryCode;

  /// Full name of the entity where the station is located inside the country
  final String state;

  /// Languages that are spoken in this stream.
  @JsonKey(fromJson: _splitByComma)
  final List<String> language;

  /// Languages that are spoken in this stream by code ISO 639-2/B
  @JsonKey(name: "languagecodes", fromJson: _splitByComma)
  final List<String> languageCodes;

  /// Number of votes for this station. This number is by server and only ever increases. It will never be reset to 0.
  final int votes;

  /// Last time when the stream information was changed in the database
  @JsonKey(name: "lastchangetime")
  final String lastChangeTime;

  /// Last time when the stream information was changed in the database
  @JsonKey(name: "lastchangetime_iso8601")
  final String lastChangeTimeISO;

  /// The codec of this stream recorded at the last check.
  final String codec;

  /// The bitrate of this stream recorded at the last check.
  final int bitrate;

  /// Mark if this stream is using HLS distribution or non-HLS.
  @JsonKey(fromJson: _intToBool)
  final bool hls;

  /// The current online/offline state of this stream.
  /// This is a value calculated from multiple measure points in the internet.
  /// The test servers are located in different countries. It is a majority vote.
  @JsonKey(name: "lastcheckok", fromJson: _intToBool)
  final bool lastCheckOk;

  /// The last time when any radio-browser server checked the online state of this stream
  @JsonKey(name: "lastchecktime")
  final String lastCheckTime;

  /// The last time when any radio-browser server checked the online state of this stream
  @JsonKey(name: "lastchecktime_iso8601")
  final String lastCheckTimeISO;

  /// The last time when the stream was checked for the online status with a positive result
  @JsonKey(name: "lastcheckoktime")
  final String lastCheckOkTime;

  /// The last time when the stream was checked for the online status with a positive result
  @JsonKey(name: "lastcheckoktime_iso8601")
  final String lastCheckOkTimeISO;

  /// The last time when this server checked the online state and the metadata of this stream
  @JsonKey(name: "lastlocalchecktime")
  final String lastLocalCheckTime;

  /// The last time when this server checked the online state and the metadata of this stream
  @JsonKey(name: "lastlocalchecktime_iso8601")
  final String lastLocalCheckTimeISO;

  /// The time of the last click recorded for this stream
  @JsonKey(name: "clicktimestamp")
  final String clickTimestamp;

  /// The time of the last click recorded for this stream
  @JsonKey(name: "clicktimestamp_iso8601")
  final String clickTimestampISO;

  /// Clicks within the last 24 hours
  @JsonKey(name: "clickcount")
  final int clickCount;

  /// The difference of the clickcounts within the last 2 days.
  /// Posivite values mean an increase, negative a decrease of clicks
  @JsonKey(name: "clicktrend")
  final int clickTrend;

  /// whether or not there was an ssl error while connecting to the stream url
  @JsonKey(name: "ssl_error", fromJson: _intToBool)
  final bool sslError;

  /// Latitude on earth where the stream is located.
  @JsonKey(name: "geo_lat")
  final double? lattitude;

  /// Longitude on earth where the stream is located.
  @JsonKey(name: "geo_long")
  final double? longitude;

  /// Is true, if the stream owner does provide extended information as HTTP headers which override the information in the database.
  @JsonKey(name: "has_extended_info", defaultValue: false)
  final bool hasExtendedInfo;

  const Station(
    this.changeUUID,
    this.stationUUID,
    this.serverUUID,
    this.name,
    this.url,
    this.urlResolved,
    this.homePage,
    this.favicon,
    this.tags,
    this.country,
    this.countryCode,
    this.state,
    this.language,
    this.languageCodes,
    this.votes,
    this.lastChangeTime,
    this.lastChangeTimeISO,
    this.codec,
    this.bitrate,
    this.hls,
    this.lastCheckOk,
    this.lastCheckTime,
    this.lastCheckTimeISO,
    this.lastCheckOkTime,
    this.lastCheckOkTimeISO,
    this.lastLocalCheckTime,
    this.lastLocalCheckTimeISO,
    this.clickTimestamp,
    this.clickTimestampISO,
    this.clickCount,
    this.clickTrend,
    this.sslError,
    this.lattitude,
    this.longitude,
    this.hasExtendedInfo,
  );

  static List<String> _splitByComma(String value) => value.split(",");

  static bool _intToBool(int value) => value == 1;

  factory Station.fromJson(Map<String, dynamic> json) =>
      _$StationFromJson(json);

  Map<String, dynamic> toJson() => _$StationToJson(this);

  @override
  List<Object?> get props => [
        changeUUID,
        stationUUID,
        name,
        url,
        urlResolved,
        homePage,
        favicon,
        tags,
        country,
        countryCode,
        state,
        language,
        languageCodes,
        votes,
        lastChangeTime,
        lastChangeTimeISO,
        codec,
        bitrate,
        hls,
        lastCheckOk,
        lastCheckTime,
        lastCheckTimeISO,
        lastCheckOkTime,
        lastCheckOkTimeISO,
        lastLocalCheckTime,
        lastLocalCheckTimeISO,
        clickTimestamp,
        clickTimestampISO,
        clickCount,
        clickTrend,
        sslError,
        lattitude,
        longitude,
        hasExtendedInfo,
      ];
}
